"use strict";

/* global console */
/* eslint no-console: 0 */

var commands = require("./commands");
var themes = require("./themes");

var DEFAULT_OUT_COLOR_SCHEME = "custom-scheme";

var extname = function extname(filename) {
    return filename.substring(filename.lastIndexOf("."));
};

var getBootstrapConfig = function getBootstrapConfig(fileName) {
    var extension = extname(fileName);
    var bootstrap = false;
    var version = 0;

    if (extension === ".scss") {
        bootstrap = true;
        version = 4;
    } else if (extension === ".less") {
        bootstrap = true;
        version = 3;
    }

    return { isBootstrap: bootstrap, bootstrapVersion: version };
};

var getOutParameters = function getOutParameters(command, themeName, config) {
    var outputFile = config.outputFile || "";
    var outColorScheme = config.outputColorScheme || "";
    var fileFormat = config.outputFormat || extname(outputFile).substr(1);

    var makeSwatch = !!config.makeSwatch;
    var base = !!config.base;

    if (!outColorScheme) {
        outColorScheme = DEFAULT_OUT_COLOR_SCHEME;
    } else if (!/^[\w\-.]+$/.test(outColorScheme)) {
        console.log("'--output-color-scheme' is not valid. '" + DEFAULT_OUT_COLOR_SCHEME + "' will be used.");
        outColorScheme = DEFAULT_OUT_COLOR_SCHEME;
    }

    if (!fileFormat) {
        switch (command) {
            case commands.BUILD_THEME:
                fileFormat = "css";
                break;
            case commands.BUILD_VARS:
                fileFormat = "less";
                break;
            case commands.BUILD_META:
                fileFormat = "json";
                break;
        }
    }

    if (!outputFile) {
        outputFile = "dx." + themeName + "." + outColorScheme + "." + fileFormat;
    }

    return {
        outputFile: outputFile,
        fileFormat: fileFormat,
        outColorScheme: outColorScheme,
        makeSwatch: makeSwatch,
        base: base
    };
};

var getThemeAndColorScheme = function getThemeAndColorScheme(config) {
    var themeName = "generic";
    var colorScheme = "light";
    var foundTheme = null;

    if (config.baseTheme) {
        var dotIndex = config.baseTheme.indexOf(".");
        var passedThemeName = config.baseTheme.substr(0, dotIndex);
        var passedColorScheme = config.baseTheme.substr(dotIndex + 1).replace(/\./g, "-");

        console.log(passedThemeName, passedColorScheme);

        foundTheme = themes.find(function (t) {
            return t.name === passedThemeName && t.colorScheme === passedColorScheme;
        });
        if (!foundTheme) {
            console.log("The base theme with name " + config.baseTheme + " does not exist.");
        }
    } else if (config.themeId) {
        foundTheme = themes.find(function (t) {
            return t.themeId === parseInt(config.themeId);
        });
        if (!foundTheme) {
            console.log("The theme with ID " + config.themeId + " does not exist.");
        }
    }

    if (foundTheme) {
        themeName = foundTheme.name;
        colorScheme = foundTheme.colorScheme;
    }

    return {
        themeName: themeName,
        colorScheme: colorScheme
    };
};

var normalizePath = function normalizePath(path) {
    return path + (path[path.length - 1] !== "/" ? "/" : "");
};

var parseConfig = function parseConfig(config) {
    var command = config.command;
    var metadataFilePath = config.inputFile || "";
    var themeInfo = getThemeAndColorScheme(config);
    var bootstrapConfig = getBootstrapConfig(metadataFilePath);
    var output = getOutParameters(command, themeInfo.themeName, config);

    delete config.baseTheme;
    delete config.outputColorScheme;
    delete config.outputFormat;
    delete config.outputFile;
    delete config.inputFile;
    delete config.themeId;

    if (config.lessPath) {
        config.lessPath = normalizePath(config.lessPath);
    }

    if (config.scssPath) {
        config.scssPath = normalizePath(config.scssPath);
    }

    Object.assign(config, {
        data: config.data !== undefined ? config.data : {},
        fileFormat: output.fileFormat,
        themeName: themeInfo.themeName,
        colorScheme: themeInfo.colorScheme,
        outColorScheme: output.outColorScheme,
        isBootstrap: bootstrapConfig.isBootstrap,
        bootstrapVersion: bootstrapConfig.bootstrapVersion,
        out: output.outputFile,
        makeSwatch: output.makeSwatch,
        base: output.base
    });
};

module.exports = parseConfig;